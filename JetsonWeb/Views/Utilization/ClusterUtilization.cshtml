@model JetsonWeb.Models.ClusterSummary
@{
    ViewData["Title"] = "Cluster Utilization";
}

<script type="text/javascript" src="https://www.chartjs.org/dist/2.9.3/Chart.min.js"></script>
<script type="text/javascript" src="https://www.chartjs.org/samples/latest/utils.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<h3>Cluster Utilization</h3>

<div id="HeaderWrapper">
    <div id="ClusterID">
        <h5>Cluster @Html.DisplayNameFor(model => model.Cluster.Id): @Html.DisplayFor(model => model.Cluster.Id)</h5>
        <p id="last-updated">Last Updated: @ViewData["LastUpdated"]</p>
    </div>
    <div id="AdvancedOptions">
        <a href="ClusterUtilizationHistorical?id=@Html.DisplayFor(model => model.Cluster.Id)" class="nextBtn">Historical</a>
        <a href="ClusterUtilizationAdvanced?id=@Html.DisplayFor(model => model.Cluster.Id)" class="nextBtn">Advanced &raquo;</a>
    </div>
    <hr class="divider" />
</div>

<div id="ClusterMemoryUtilizationRT">
    <div class="chart-container-rt">
        <canvas id="cluster-memory-utilization"></canvas>
    </div>
</div>
<div id="ClusterPowerUtilizationRT2">
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-memory-utilization-rt"></canvas>
    </div>
    <div class="div-divider"></div>
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-cpu-usage-rt"></canvas>
    </div>
</div>
<div id="ClusterPowerUtilizationRT2">
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-current-utilization-rt"></canvas>
    </div>
    <div class="div-divider"></div>
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-power-utilization-rt"></canvas>
    </div>
</div>

<div id="myModal" class="modal">

    <!-- Modal content -->
    <div class="modal-content">
        <span class="close">&times;</span>
        <p>Error retrieving data.</p>
    </div>

</div>

<script>
    var clusterMemoryUtilizationRTConfig = {
        type: 'doughnut',
        data: {
            datasets: [{
                data: [
                ],
                backgroundColor: [
                    window.chartColors.red,
                    window.chartColors.green
                ],
                label: 'Cluster Total Memory Usage'
            }],
            labels: [
                'Memory Used (GB)',
                'Memory Available (GB)'
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Total Memory Usage (GB)'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            }
        }
    };

    @{
        uint maxNodeMemory = 0;
        foreach (var node in Model.NodeSummaries)
        {
            uint nodeMemory = node.RecentUtilization.MemoryUsed + node.RecentUtilization.MemoryAvailable;
            if (nodeMemory > maxNodeMemory)
            {
                maxNodeMemory = nodeMemory;
            }
        }

        float maxNodeMemoryGB = (float)maxNodeMemory / (float)1024;
    }

    var clusterPerNodeMemoryUtilizationRTConfig = {
        type: 'bar',
        data: {
            datasets: [{
                label: 'Memory Used',
                data: [
                ],
                backgroundColor: window.chartColors.red,
                borderWidth: 1,
            }, {
                label: 'Memory Available',
                data: [
                ],
                backgroundColor: window.chartColors.green,
                borderWidth: 1,
            }],
            labels: [
                @foreach (var node in Model.NodeSummaries)
                {
                    @Html.Raw("\"Node " + node.Id.ToString() + "\",");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node Memory Information'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                xAxes: [{
                    stacked: true,
                }],
                yAxes: [{
                    stacked: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Memory Usage (GB)'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 6,
                        suggestedMin: 0,
                        max: @maxNodeMemoryGB,
                    }
                }]
            }
        }
    };

    var clusterPerNodeCurrentUtilizationRTConfig = {
        type: 'bar',
        data: {
            datasets: [{
                data: [
                    @foreach (var node in Model.NodeSummaries)
                    {
                        var powerData = node.RecentPower;
                        @Html.Raw(powerData.Current.ToString());
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.blue,
                borderWidth: 1,
                label: 'Per-Node Current Draw'
            }],
            labels: [
                @foreach (var node in Model.NodeSummaries)
                {
                    @Html.Raw("\'Node " + node.Id.ToString() + "\',");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node Current Draw'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Current (A)'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 6,
                        suggestedMin: 0
                    }
                }]
            }
        }
    };


    @{
        List<uint> cpuPointLabels = new List<uint>();
        foreach (var node in Model.NodeSummaries)
        {
            cpuPointLabels.Add(node.Id);
        }
        List<string> colorList = new List<string>()
        {
            "rgb(255, 99, 132)",    // red
            "rgb(255, 159, 64)",    // orange
            "rgb(255, 205, 86)",    // yellow
            "rgb(75, 192, 192)",    // green
            "rgb(54, 162, 235)",    // blue
            "rgb(153, 102, 255)",   // purple
            "rgb(201, 203, 207)"    // grey
        };
    }

    var clusterPerNodeCPUUtilizationRtData = {
        labels: [
            @foreach (var label in cpuPointLabels)
            {
                @Html.Raw("\'Node " + label + "\',");
            }
        ],
        datasets: [
            @for (int i = 0; i < Model.NodeSummaries[0].RecentUtilization.Cores.Count(); i++)
            {
                @Html.Raw('{');
                @Html.Raw("label: \'Core " + i + " (%)\',\n");
                @Html.Raw("backgroundColor: \'" + colorList[i % colorList.Count()] + "\',\n");
                @Html.Raw("borderWidth: 1,\n");
                @Html.Raw("data: [],\n");
                @Html.Raw("},");
            }
        ]
    };

    var clusterPerNodeCPUUtilizationRtConfig = {
        responsive: true,
        title: {
            display: true,
            text: 'Average CPU Usage (%)'
        },
        tooltips: {
            mode: 'index',
            intersect: false,
            yAlign: 'right'
        },
        hover: {
            mode: 'nearest',
            intersect: true
        },
        scales: {
            xAxes: [{
                stacked: true,
            }],
            yAxes: [{
                stacked: true,
                ticks: {
                    min: 0,
                    suggestedMax: 100
                }
            }]
        },
        legend: {
            display: false,
        },
    }

     var clusterPerNodePowerUtilizationRTConfig = {
        type: 'bar',
        data: {
            datasets: [{
                data: [
                ],
                backgroundColor: window.chartColors.orange,
                borderWidth: 1,
                label: 'Per-Node Power Usage'
            }],
            labels: [
                @foreach(var node in Model.NodeSummaries)
                {
                    @Html.Raw("\'Node " + node.Id.ToString() + "\',");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node Power Usage'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Power (W)'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 6,
                        suggestedMin: 0
                    }
                }]
            }
        }
    };

    window.onload = function () {
        var clusterMemoryCtx = this.document.getElementById('cluster-memory-utilization').getContext('2d');
        var clusterPerNodeMemoryUtilizationRTCtx = this.document.getElementById('cluster-per-node-memory-utilization-rt').getContext('2d');
        var clusterPerNodeCurrentUtilizationRTCtx = this.document.getElementById('cluster-per-node-current-utilization-rt').getContext('2d');
        var clusterPerNodePowerUtilizationRTCtx = this.document.getElementById('cluster-per-node-power-utilization-rt').getContext('2d');
        var clusterPerNodeCPUUtilizationRTCtx = this.document.getElementById('cluster-per-node-cpu-usage-rt').getContext('2d');

        window.clusterMemoryChart = new Chart(clusterMemoryCtx, this.clusterMemoryUtilizationRTConfig);
        window.clusterPerNodeMemoryChart = new Chart(clusterPerNodeMemoryUtilizationRTCtx, this.clusterPerNodeMemoryUtilizationRTConfig);
        window.clusterPerNodeCurrentChart = new Chart(clusterPerNodeCurrentUtilizationRTCtx, this.clusterPerNodeCurrentUtilizationRTConfig);
        window.clusterPerNodePowerChart = new Chart(clusterPerNodePowerUtilizationRTCtx, this.clusterPerNodePowerUtilizationRTConfig);
        window.clusterPerNodeCPUChart = new Chart(clusterPerNodeCPUUtilizationRTCtx, {
            type: 'bar',
            data: clusterPerNodeCPUUtilizationRtData,
            options: clusterPerNodeCPUUtilizationRtConfig,
        });
    };

    $(document).ready(updateChartData);
    setInterval(updateChartData, @ViewData["ReportingInterval"]* 1000);

    var chartColorValues = Object.keys(window.chartColors).map(function (key) {
        return window.chartColors[key];
    });

    function updateChartData() {
        $.ajax({
            type: "GET",
            url: "../GraphDataLiveView/GetClusterUtilization?id=@Html.DisplayFor(model => model.Cluster.Id)",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (realtimeData) {
                clusterPerNodePowerChart.data.datasets[0].data = realtimeData.perNodePowerUtilization;
                clusterPerNodePowerChart.update();

                var clusterMemoryChartData = [realtimeData.clusterMemoryUsedGB, realtimeData.clusterMemoryAvailableGB];
                clusterMemoryChart.data.datasets[0].data = clusterMemoryChartData;
                clusterMemoryChart.update();

                //clusterPerNodeCPUChart.data.datasets.splice(0, realtimeData.perNodeCpuUtilization.length);
                $.each(realtimeData.perNodeCpuUtilization, function (i, core) {
                    //var newDataset = {
                    //    label: "Core " + i + " (%)",
                    //    backgroundColor: chartColorValues[i % chartColorValues.length],
                    //    borderWidth: 1,
                    //    data: core,
                    //};
                    //clusterPerNodeCPUChart.data.datasets.push(newDataset);
                    clusterPerNodeCPUChart.data.datasets[i].data = core;
                });
                clusterPerNodeCPUChart.update();

                clusterPerNodeMemoryChart.data.datasets[0].data = realtimeData.perNodeMemoryUsedGB;
                clusterPerNodeMemoryChart.data.datasets[1].data = realtimeData.perNodeMemoryAvailableGB;
                clusterPerNodeMemoryChart.update();

                clusterPerNodeCurrentChart.data.datasets[0].data = realtimeData.perNodeCurrentUtilization;
                clusterPerNodeCurrentChart.update();

                var updated = document.getElementById("last-updated");
                updated.innerHTML = "Last Updated: " + realtimeData.timeStamp;
                modal.style.display = "none";
            },
            failure: function (data) {
                modal.style.display = "block";
            },
            error: function (data) {
                modal.style.display = "block";
            }
        });
    }

    var modal = document.getElementById("myModal");
    var span = document.getElementsByClassName("close")[0];

    span.onclick = function () {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

</script>

<style>
    .chart-container-rt {
        width: 40%;
        margin: auto;
    }

    .chart-container-rt2 {
        width: 41.7%;
        display: inline-block;
        margin: auto;
    }

    #ClusterMemoryUtilizationRT {
        margin: auto;
    }

    #ClusterID {
        display: inline-block;
    }

    #AdvancedOptions {
        float: right;
        display: block;
        vertical-align: bottom;
    }

    .nextBtn {
        background-color: #f1f1f1;
        color: black;
        padding: 8px 16px;
        display: inline-block;
        text-decoration: none;
    }

    .nextBtn:hover {
        background-color: #dddddd;
        color: black;
    }

    .divider {
        margin-top: 0.2em;
        margin-bottom: 0.2em;
    }

    p {
        margin: 0px;
        padding: 0px;
    }

    h3, h5 {
        margin-bottom: 0.05em;
    }

    .div-divider {
        display: inline-block;
        width: 15%;
    }

    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        margin: auto;
    }

    /* Modal Content */
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 20%;
    }

    /* The Close Button */
    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }
</style>
