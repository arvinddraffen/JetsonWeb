@model JetsonModels.Cluster
@{
    ViewData["Title"] = "Cluster Utilization";
}

<script type="text/javascript" src="https://www.chartjs.org/dist/2.9.3/Chart.min.js"></script>
<script type="text/javascript" src="https://www.chartjs.org/samples/latest/utils.js"></script>

<h1>Cluster Utilization</h1>

<div id="SummaryTable">
    <h4>Cluster @Html.DisplayNameFor(model => model.Id): @Html.DisplayFor(model => model.Id)</h4>
    <hr />
    <table class="ClusterInfo">
        <tr class="ClusterInfo">
            <th class="ClusterInfo">Node ID</th>
            <th class="ClusterInfo">IP Address</th>
        </tr>
        @foreach(var item in Model.Nodes)
        {
            <tr class="ClusterInfo">
                <td class="ClusterInfo"> @Html.DisplayFor(modelItem => item.Id) </td>
                <td class="ClusterInfo"> @Html.DisplayFor(modelItem => item.IPAddress) </td>
            </tr>
        }
    </table>
</div>

<div id="ClusterMemoryUtilization">
    <div class="chart-container">
        <canvas id="cluster-memory-utilization"></canvas>
    </div>
    <div class="chart-container">
        <canvas id="cluster-per-node-current"></canvas>
        </div>
</div>

    <script>
    var clusterMemoryUtilizationConfig = {
        type: 'doughnut',
        data: {
            datasets: [{
                data: [
                    @{
                        uint clusterMemUsed = 0, clusterMemAvailable = 0;
                        foreach (var node in Model.Nodes)
                        {
                            var utilizationData = node.Utilization.OrderByDescending(m => m.TimeStamp).FirstOrDefault();
                            clusterMemUsed += utilizationData.MemoryUsed;
                            clusterMemAvailable += utilizationData.MemoryAvailable;
                        }
                    }
                    @clusterMemUsed, @clusterMemAvailable
                ],
                backgroundColor: [
                    window.chartColors.red,
                    window.chartColors.green
                ],
                label: 'Cluster Total Memory Usage'
            }],
            labels: [
                'Memory Used (MB)',
                'Memory Available (MB)'
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Total Memory Usage'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            }
        }
    };

    var clusterPerNodeCurrentConfig = {
        type: 'bar',
        data: {
            datasets: [{
                data: [
                    @foreach(var node in Model.Nodes)
                    {
                        var powerData = node.Power.OrderByDescending(m => m.Timestamp).FirstOrDefault();
                        @Html.Raw(powerData.Current.ToString());
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.blue,
                borderWidth: 1,
                label: 'Per-Node Current Draw'
            }],
            labels: [
                @foreach(var node in Model.Nodes)
                {
                    @Html.Raw(node.Id.ToString());
                    @Html.Raw(",");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node Current Draw'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Current (A)'
                    }
                }]
            }
        }
    };

    window.onload = function () {
        var clusterMemoryCtx = this.document.getElementById('cluster-memory-utilization').getContext('2d');
        var clusterPerNodeCurrentCtx = this.document.getElementById('cluster-per-node-current').getContext('2d');
        window.clusterMemoryChart = new Chart(clusterMemoryCtx, this.clusterMemoryUtilizationConfig);
        window.clusterPerNodeCurrentChart = new Chart(clusterPerNodeCurrentCtx, this.clusterPerNodeCurrentConfig);
    };
    </script>

    <style>
        .ClusterInfo {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 25%;
            border: 1px solid black;
            text-align: center;
        }

        th.ClusterInfo {
            padding: 6px;
            background-color: #dddddd;
        }

        td.ClusterInfo {
            padding: 3px;
        }

        tr.ClusterInfo:hover {
            background-color: #dddddd;
        }

        .chart-container{
            width: 45%;
            display: inline-block;
        }
    </style>
