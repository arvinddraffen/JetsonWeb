@model JetsonModels.Cluster
@{
    ViewData["Title"] = "Cluster Utilization";
}

<script type="text/javascript" src="https://www.chartjs.org/dist/2.9.3/Chart.min.js"></script>
<script type="text/javascript" src="https://www.chartjs.org/samples/latest/utils.js"></script>

<h1>Cluster Utilization</h1>

<div id="ClusterID">
    <h4>Cluster @Html.DisplayNameFor(model => model.Id): @Html.DisplayFor(model => model.Id)</h4>
    <hr />
    
</div>

<div id="ClusterMemoryUtilizationRT">
    <div class="chart-container-rt">
        <canvas id="cluster-memory-utilization"></canvas>
    </div>
</div>
<div id="ClusterPowerUtilizationRT2">
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-memory-utilization-rt"></canvas>
    </div>
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-cpu-usage-rt"></canvas>
    </div>
</div>
<div id="ClusterPowerUtilizationRT2">
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-current-utilization-rt"></canvas>
    </div>
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-power-utilization-rt"></canvas>
    </div>
</div>

<script>
    var clusterMemoryUtilizationRTConfig = {
        type: 'doughnut',
        data: {
            datasets: [{
                data: [
                    @{
                        uint clusterMemUsed = 0, clusterMemAvailable = 0;
                        foreach (var node in Model.Nodes)
                        {
                            var utilizationData = node.Utilization.OrderByDescending(m => m.TimeStamp).FirstOrDefault();
                            clusterMemUsed += utilizationData.MemoryUsed;
                            clusterMemAvailable += utilizationData.MemoryAvailable;
                        }
                    }
                    @clusterMemUsed, @clusterMemAvailable
                ],
                backgroundColor: [
                    window.chartColors.red,
                    window.chartColors.green
                ],
                label: 'Cluster Total Memory Usage'
            }],
            labels: [
                'Memory Used (MB)',
                'Memory Available (MB)'
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Total Memory Usage'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            }
        }
    };

    var clusterPerNodeMemoryUtilizationRTConfig = {
        type: 'bar',
        data: {
            datasets: [{
                label: 'Memory Used',
                data: [
                    @foreach(var node in Model.Nodes)
                    {
                        var perNodeUtil = node.Utilization.OrderByDescending(m => m.TimeStamp).FirstOrDefault();
                        @Html.Raw(perNodeUtil.MemoryUsed);
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.red,
                borderWidth: 1,
            }, {
                label: 'Memory Available',
                data: [
                    @foreach(var node in Model.Nodes)
                    {
                        var perNodeUtil = node.Utilization.OrderByDescending(m => m.TimeStamp).FirstOrDefault();
                        @Html.Raw(perNodeUtil.MemoryAvailable);
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.green,
                borderWidth: 1,
            }],
            labels: [
                @foreach(var node in Model.Nodes)
                {
                    @Html.Raw(node.Id.ToString());
                    @Html.Raw(",");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node Memory Information'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                xAxes: [{
                    stacked: true,
                }],
                yAxes: [{
                    stacked: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Memory Usage (MB)'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 6,
                        suggestedMin: 0
                    }
                }]
            }
        }
    };

    var clusterPerNodeCurrentUtilizationRTConfig = {
        type: 'bar',
        data: {
            datasets: [{
                data: [
                    @foreach(var node in Model.Nodes)
                    {
                        var powerData = node.Power.OrderByDescending(m => m.Timestamp).FirstOrDefault();
                        @Html.Raw(powerData.Current.ToString());
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.blue,
                borderWidth: 1,
                label: 'Per-Node Current Draw'
            }],
            labels: [
                @foreach(var node in Model.Nodes)
                {
                    @Html.Raw(node.Id.ToString());
                    @Html.Raw(",");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node Current Draw'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Current (A)'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 6,
                        suggestedMin: 0
                    }
                }]
            }
        }
    };

    var clusterPerNodeCPUUtilizationRTConfig = {
        type: 'bar',
        data: {
            datasets: [{
                data: [
                    @foreach(var node in Model.Nodes)
                    {
                        var utilData = node.Utilization.OrderByDescending(m => m.TimeStamp).FirstOrDefault();
                        var cores = utilData.Cores;
                        float avgUtilPctg = 0;
                        foreach (var core in cores)
                        {
                            avgUtilPctg += core.UtilizationPercentage;
                        }
                        @Html.Raw(avgUtilPctg / cores.Count());
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.blue,
                borderWidth: 1,
                label: 'Per-Node Average CPU Usage'
            }],
            labels: [
                @foreach(var node in Model.Nodes)
                {
                    @Html.Raw(node.Id.ToString());
                    @Html.Raw(",");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node CPU Usage'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'CPU Usage (%)'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 6,
                        suggestedMin: 0
                    }
                }]
            }
        }
    };

     var clusterPerNodePowerUtilizationRTConfig = {
        type: 'bar',
        data: {
            datasets: [{
                data: [
                    @foreach(var node in Model.Nodes)
                    {
                        var powerData = node.Power.OrderByDescending(m => m.Timestamp).FirstOrDefault();
                        @Html.Raw(powerData.Power.ToString());
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.orange,
                borderWidth: 1,
                label: 'Per-Node Power Usage'
            }],
            labels: [
                @foreach(var node in Model.Nodes)
                {
                    @Html.Raw(node.Id.ToString());
                    @Html.Raw(",");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node Power Usage'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Power (W)'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 6,
                        suggestedMin: 0
                    }
                }]
            }
        }
    };

    window.onload = function () {
        var clusterMemoryCtx = this.document.getElementById('cluster-memory-utilization').getContext('2d');
        var clusterPerNodeMemoryUtilizationRTCtx = this.document.getElementById('cluster-per-node-memory-utilization-rt').getContext('2d');
        var clusterPerNodeCPUUsageRTCtx = this.document.getElementById('cluster-per-node-cpu-usage-rt').getContext('2d');
        var clusterPerNodeCurrentUtilizationRTCtx = this.document.getElementById('cluster-per-node-current-utilization-rt').getContext('2d');
        var clusterPerNodePowerUtilizationRTCtx = this.document.getElementById('cluster-per-node-power-utilization-rt').getContext('2d');

        window.clusterMemoryChart = new Chart(clusterMemoryCtx, this.clusterMemoryUtilizationRTConfig);
        window.clusterPerNodeMemoryChart = new Chart(clusterPerNodeMemoryUtilizationRTCtx, this.clusterPerNodeMemoryUtilizationRTConfig);
        window.clusterPerNodeCPUChart = new Chart(clusterPerNodeCPUUsageRTCtx, this.clusterPerNodeCPUUtilizationRTConfig);
        window.clusterPerNodeCurrentChart = new Chart(clusterPerNodeCurrentUtilizationRTCtx, this.clusterPerNodeCurrentUtilizationRTConfig);
        window.clusterPerNodePowerChart = new Chart(clusterPerNodePowerUtilizationRTCtx, this.clusterPerNodePowerUtilizationRTConfig);
    };

    setInterval(function () {
        clusterPerNodePowerChart.config.data.datasets[0].data = [
            @foreach(var node in Model.Nodes)
            {
                var powerData = node.Power.OrderByDescending(m => m.Timestamp).FirstOrDefault();
                @Html.Raw(powerData.Power.ToString());
                @Html.Raw(",");
            }
        ]
        clusterPerNodePowerChart.update();
    }, 35000);
</script>

    <style>
        .chart-container-rt {
            width: 45%;
            margin: auto;
        }

        .chart-container-rt2 {
            width: 45%;
            display: inline-block;
        }

        #ClusterMemoryUtilizationRT {
            margin: auto;
        }
    </style>
