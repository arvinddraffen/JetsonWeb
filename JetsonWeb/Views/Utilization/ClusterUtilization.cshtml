@model JetsonWeb.Models.ClusterSummary
@{
    ViewData["Title"] = "Cluster Utilization";
}

<script type="text/javascript" src="https://www.chartjs.org/dist/2.9.3/Chart.min.js"></script>
<script type="text/javascript" src="https://www.chartjs.org/samples/latest/utils.js"></script>

<h3>Cluster Utilization</h3>

<div id="HeaderWrapper">
    <div id="ClusterID">
        <h5>Cluster @Html.DisplayNameFor(model => model.Cluster.Id): @Html.DisplayFor(model => model.Cluster.Id)</h5>
        <p>Last Updated: @ViewData["LastUpdated"]</p>
    </div>
    <div id="AdvancedOptions">
        <a href="ClusterUtilizationHistorical?id=@Html.DisplayFor(model => model.Cluster.Id)" class="nextBtn">Historical</a>
        <a href="ClusterUtilizationAdvanced?id=@Html.DisplayFor(model => model.Cluster.Id)" class="nextBtn">Advanced &raquo;</a>
    </div>
    <hr class="divider" />
</div>

<div id="ClusterMemoryUtilizationRT">
    <div class="chart-container-rt">
        <canvas id="cluster-memory-utilization"></canvas>
    </div>
</div>
<div id="ClusterPowerUtilizationRT2">
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-memory-utilization-rt"></canvas>
    </div>
    <div class="div-divider"></div>
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-cpu-usage-rt"></canvas>
    </div>
</div>
<div id="ClusterPowerUtilizationRT2">
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-current-utilization-rt"></canvas>
    </div>
    <div class="div-divider"></div>
    <div class="chart-container-rt2">
        <canvas id="cluster-per-node-power-utilization-rt"></canvas>
    </div>
</div>

<script>
    var clusterMemoryUtilizationRTConfig = {
        type: 'doughnut',
        data: {
            datasets: [{
                data: [
                    @{
                        uint clusterMemUsed = 0, clusterMemAvailable = 0;
                        foreach (var node in Model.NodeSummaries)
                        {
                            var utilizationData = node.RecentUtilization;
                            clusterMemUsed += utilizationData.MemoryUsed;
                            clusterMemAvailable += utilizationData.MemoryAvailable;
                        }
                    }
                    @clusterMemUsed, @clusterMemAvailable
                ],
                backgroundColor: [
                    window.chartColors.red,
                    window.chartColors.green
                ],
                label: 'Cluster Total Memory Usage'
            }],
            labels: [
                'Memory Used (MB)',
                'Memory Available (MB)'
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Total Memory Usage'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            }
        }
    };

    var clusterPerNodeMemoryUtilizationRTConfig = {
        type: 'bar',
        data: {
            datasets: [{
                label: 'Memory Used',
                data: [
                    @foreach(var node in Model.NodeSummaries)
                    {
                        var perNodeUtil = node.RecentUtilization;
                        @Html.Raw(perNodeUtil.MemoryUsed);
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.red,
                borderWidth: 1,
            }, {
                label: 'Memory Available',
                data: [
                    @foreach(var node in Model.NodeSummaries)
                    {
                        var perNodeUtil = node.RecentUtilization;
                        @Html.Raw(perNodeUtil.MemoryAvailable);
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.green,
                borderWidth: 1,
            }],
            labels: [
                @foreach(var node in Model.NodeSummaries)
                {
                    @Html.Raw(node.Id.ToString());
                    @Html.Raw(",");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node Memory Information'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                xAxes: [{
                    stacked: true,
                }],
                yAxes: [{
                    stacked: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Memory Usage (MB)'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 6,
                        suggestedMin: 0
                    }
                }]
            }
        }
    };

    var clusterPerNodeCurrentUtilizationRTConfig = {
        type: 'bar',
        data: {
            datasets: [{
                data: [
                    @foreach(var node in Model.NodeSummaries)
                    {
                        var powerData = node.RecentPower;
                        @Html.Raw(powerData.Current.ToString());
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.blue,
                borderWidth: 1,
                label: 'Per-Node Current Draw'
            }],
            labels: [
                @foreach(var node in Model.NodeSummaries)
                {
                    @Html.Raw(node.Id.ToString());
                    @Html.Raw(",");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node Current Draw'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Current (A)'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 6,
                        suggestedMin: 0
                    }
                }]
            }
        }
    };


    @{
        List<uint> cpuPointLabels = new List<uint>();
        float nodeEntryCpuUsage;
        float entryCoreCount;
        List<float> cpuNodeUtilizationPoints = new List<float>();
        foreach (var node in Model.NodeSummaries)
        {
            nodeEntryCpuUsage = 0;
            foreach (var core in node.RecentUtilization.Cores)
            {
                nodeEntryCpuUsage += core.UtilizationPercentage;                      // add up utilization percentage for all cores
            }
            entryCoreCount = node.RecentUtilization.Cores.Count();                    // number of cores in the node
            nodeEntryCpuUsage = nodeEntryCpuUsage / entryCoreCount;                   // average CPU usage across cores within the node
            nodeEntryCpuUsage /= Model.Cluster.Nodes.Count();
            cpuNodeUtilizationPoints.Add(nodeEntryCpuUsage);
            cpuPointLabels.Add(node.Id);
        }

        List<string> colorList = new List<string>()
        {
            "rgb(255, 99, 132)",    // red
            "rgb(255, 159, 64)",    // orange
            "rgb(255, 205, 86)",    // yellow
            "rgb(75, 192, 192)",    // green
            "rgb(54, 162, 235)",    // blue
            "rgb(153, 102, 255)",   // purple
            "rgb(201, 203, 207)"    // grey
        };
    }

    var cpuUtilizationLabels = [@Html.Raw(string.Join(',', cpuPointLabels))];

    var clusterPerNodeCPUUtilizationRtData = {
        labels: cpuUtilizationLabels,
        datasets: [
            @{
                for (int i = 0; i < Model.Cluster.Nodes.Count(); i++)
                {
                    @Html.Raw('{');
                    @Html.Raw("label: \'Average CPU Usage for Node " + i.ToString() + " (%)\',\n");
                    @Html.Raw("backgroundColor: \'" + colorList[i % colorList.Count()] + "\',\n");
                    @Html.Raw("borderWidth: 1,\n");
                    @Html.Raw("data: [");
                    foreach(var utilPoint in cpuNodeUtilizationPoints)
                    {
                        @Html.Raw(utilPoint.ToString());
                        @Html.Raw(',');
                    }
                    @Html.Raw("\n]")
                    @Html.Raw("}\n");
                    if (i < Model.Cluster.Nodes.Count() - 1)
                    {
                        @Html.Raw(',');
                    }
                    @Html.Raw('\n');
                }
            }
        ]
    };

    var clusterPerNodeCPUUtilizationRtConfig = {
        responsive: true,
        title: {
            display: true,
            text: 'Average CPU Usage (%)'
        },
        tooltips: {
            mode: 'index',
            intersect: false,
            yAlign: 'right'
        },
        hover: {
            mode: 'nearest',
            intersect: true
        },
        scales: {
            xAxes: [{
                stacked: true,
            }],
            yAxes: [{
                stacked: true,
            }]
        },
        legend: {
            display: false,
        },
    }

     var clusterPerNodePowerUtilizationRTConfig = {
        type: 'bar',
        data: {
            datasets: [{
                data: [
                    @foreach(var node in Model.NodeSummaries)
                    {
                        var powerData = node.RecentPower;
                        @Html.Raw(powerData.Power.ToString());
                        @Html.Raw(",");
                    }
                ],
                backgroundColor: window.chartColors.orange,
                borderWidth: 1,
                label: 'Per-Node Power Usage'
            }],
            labels: [
                @foreach(var node in Model.NodeSummaries)
                {
                    @Html.Raw(node.Id.ToString());
                    @Html.Raw(",");
                }
            ]
        },
        options: {
            responsive: true,
            legend: {
                position: 'top'
            },
            title: {
                display: true,
                text: 'Cluster Per-Node Power Usage'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            },
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Power (W)'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 6,
                        suggestedMin: 0
                    }
                }]
            }
        }
    };

    window.onload = function () {
        var clusterMemoryCtx = this.document.getElementById('cluster-memory-utilization').getContext('2d');
        var clusterPerNodeMemoryUtilizationRTCtx = this.document.getElementById('cluster-per-node-memory-utilization-rt').getContext('2d');
        var clusterPerNodeCurrentUtilizationRTCtx = this.document.getElementById('cluster-per-node-current-utilization-rt').getContext('2d');
        var clusterPerNodePowerUtilizationRTCtx = this.document.getElementById('cluster-per-node-power-utilization-rt').getContext('2d');

        window.clusterMemoryChart = new Chart(clusterMemoryCtx, this.clusterMemoryUtilizationRTConfig);
        window.clusterPerNodeMemoryChart = new Chart(clusterPerNodeMemoryUtilizationRTCtx, this.clusterPerNodeMemoryUtilizationRTConfig);
        window.clusterPerNodeCurrentChart = new Chart(clusterPerNodeCurrentUtilizationRTCtx, this.clusterPerNodeCurrentUtilizationRTConfig);
        window.clusterPerNodePowerChart = new Chart(clusterPerNodePowerUtilizationRTCtx, this.clusterPerNodePowerUtilizationRTConfig);

        var clusterPerNodeCPUUtilizationRTCtx = this.document.getElementById('cluster-per-node-cpu-usage-rt').getContext('2d');
        var historicalCpuChart = new Chart(clusterPerNodeCPUUtilizationRTCtx, {
            type: 'bar',
            data: clusterPerNodeCPUUtilizationRtData,
            options: clusterPerNodeCPUUtilizationRtConfig,
        });
    };

    //setInterval(function () {
    //    location.reload(true)
    //}, @ViewData["ReportingInterval"]*1000);
</script>

<style>
    .chart-container-rt {
        width: 40%;
        margin: auto;
    }

    .chart-container-rt2 {
        width: 41.7%;
        display: inline-block;
        margin: auto;
    }

    #ClusterMemoryUtilizationRT {
        margin: auto;
    }

    #ClusterID {
        display: inline-block;
    }

    #AdvancedOptions {
        float: right;
        display: block;
        vertical-align: bottom;
    }

    .nextBtn {
        background-color: #f1f1f1;
        color: black;
        padding: 8px 16px;
        display: inline-block;
        text-decoration: none;
    }

    .nextBtn:hover {
        background-color: #dddddd;
        color: black;
    }

    .divider {
        margin-top: 0.2em;
        margin-bottom: 0.2em;
    }

    p {
        margin: 0px;
        padding: 0px;
    }

    h3, h5 {
        margin-bottom: 0.05em;
    }

    .div-divider {
        display: inline-block;
        width: 15%;
    }
</style>
