@model JetsonWeb.Models.ClusterSummaryHistorical
@{
    ViewBag.Title = "Cluster Utilization (Historical)";
}

<script type="text/javascript" src="https://www.chartjs.org/dist/2.9.3/Chart.min.js"></script>
<script type="text/javascript" src="https://www.chartjs.org/samples/latest/utils.js"></script>

<h3>Cluster Utilization Historical</h3>

<div id="HeaderWrapper">
    <div id="ClusterID">
        <h5>Cluster @Html.DisplayNameFor(model => model.Cluster.Id): @Html.DisplayFor(model => model.Cluster.Id)</h5>
        <p>Last Updated: @ViewData["LastUpdated"]</p>
    </div>
    <div id="AdvancedOptions">
        <div class="dropdown">
            <button class="dropbtn">@ViewBag.RangeString &#8595;</button>
            <div class="dropdown-content">
                <a href="ClusterUtilizationHistorical?id=@Html.DisplayFor(model => model.Cluster.Id)&timeRange=hour">Past Hour</a>
                <a href="ClusterUtilizationHistorical?id=@Html.DisplayFor(model => model.Cluster.Id)&timeRange=day">Past Day</a>
                <a href="ClusterUtilizationHistorical?id=@Html.DisplayFor(model => model.Cluster.Id)&timeRange=week">Past Week</a>
            </div>
        </div>
        <div id="OverviewBtn">
            <a href="ClusterUtilization?id=@Html.DisplayFor(model => model.Cluster.Id)" class="prevBtn">&laquo; Overview</a>
        </div>
    </div>
    <hr />
</div>

<div id="ClusterPowerUtilizationRT2">
    <div class="chart-container-rt2">
        <canvas id="cluster-power-usage-historical"></canvas>
    </div>
    <div class="chart-container-rt2">
        <canvas id="cluster-memory-usage-historical"></canvas>
    </div>
    <div class="chart-container-rt2">
        <canvas id="cluster-cpu-usage-historical"></canvas>
    </div>
</div>

<script>
    var clusterPowerUsageHistoricalConfig = {
        type: 'line',
        data: {
            datasets: [{
                data: [
                    @{
                        List<DateTime> powerLabels = new List<DateTime>();
                        for (int i = 0; i < ViewBag.PowerDataCount; i++)
                        {
                            float totalPower = 0;
                            foreach (var node in Model.NodesSummariesHistorical)
                            {
                                totalPower += node.HistoricalPower[i].Power;
                            }
                            powerLabels.Add(Model.NodesSummariesHistorical.First().HistoricalPower[i].Timestamp);
                            @Html.Raw(totalPower);
                            @Html.Raw(",");
                        }
                    }
                ],
                label: 'Power Usage (W)',
                backgroundColor: window.chartColors.orange,
                borderColor: window.chartColors.orange,
                fill: false,
            }],
            labels: [
                @{
                    foreach (var powerLabel in powerLabels)
                    {
                        @Html.Raw("\"" + powerLabel.ToString() + "\"");
                        @Html.Raw(",");
                    }
                }
            ],
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'Power Usage (W)'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Time'
                        },
                        ticks: {
                            autoSkip: true,
                            maxTicksLimit: 20
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Power (W)'
                        },
                        ticks: {
                            min: 0
                        }
                    }]
                }
            }
        }
    };

    @{
        var memoryUsedPoints = new List<uint>();
        var memoryAvailablePoints = new List<uint>();
        var memoryPointTimestamps = new List<DateTime>();
        var maxMemory = 0u;

        for (int i = 0; i < ViewBag.UtilizationDataCount; i++)
        {
            uint totalEntryMemoryUsed = 0;
            uint totalEntryMemoryAvailable = 0;

            foreach (var node in Model.NodesSummariesHistorical)
            {
                totalEntryMemoryUsed += node.HistoricalUtilization[i].MemoryUsed;
                totalEntryMemoryAvailable += node.HistoricalUtilization[i].MemoryAvailable;
            }

            maxMemory = Math.Max(maxMemory, totalEntryMemoryUsed + totalEntryMemoryAvailable);

            memoryUsedPoints.Add(totalEntryMemoryUsed);
            memoryAvailablePoints.Add(totalEntryMemoryAvailable);
            memoryPointTimestamps.Add(Model.NodesSummariesHistorical.First().HistoricalUtilization[i].TimeStamp);
        }
    }

    var historicalMemoryUsedData = [@string.Join(',', memoryUsedPoints.Select(i => i.ToString()))];
    var historicalMemoryAvailData = [@string.Join(',', memoryAvailablePoints.Select(i => i.ToString()))];
    var historicalMemoryTimestamps = [@Html.Raw(string.Join(',', memoryPointTimestamps.Select(i => $"\"{i.ToString()}\"")))];

    var historicalMemoryChartData = {
        labels: historicalMemoryTimestamps,
        datasets: [
            {
                label: 'Memory Used (MB)',
                backgroundColor: window.chartColors.red,
                borderColor: window.chartColors.red,
                fill: true,
                data: historicalMemoryUsedData,
            },
            {
                label: 'Memory Available (MB)',
                backgroundColor: window.chartColors.green,
                borderColor: window.chartColors.green,
                fill: true,
                data: historicalMemoryAvailData,
            }
        ]
    };

    var historicalMemoryChartOptions = {
        responsive: true,
        title: {
            display: true,
            text: 'Memory Usage (MB)'
        },
        tooltips: {
            mode: 'index',
            intersect: false,
        },
        hover: {
            mode: 'nearest',
            intersect: true
        },
        scales: {
            xAxes: [{
                stacked: true,
            }],
            yAxes: [{
                stacked: true,
            }]
        },
        legend: {
            display: false,
        },
    }

    @{
        List<DateTime> cpuPointTimestamps = new List<DateTime>();
        List<float> cpuUtilizationPoints = new List<float>();
        float totalEntryCpuUsage;
        float nodeEntryCpuUsage;
        float entryCoreCount;
        for (int i = 0; i < ViewBag.UtilizationDataCount; i++)
        {
            totalEntryCpuUsage = 0;
            foreach (var node in Model.NodesSummariesHistorical)
            {
                nodeEntryCpuUsage = 0;
                foreach(var core in node.HistoricalUtilization[i].Cores)
                {
                    nodeEntryCpuUsage += core.UtilizationPercentage;                      // add up utilization percentage for all cores
                }
                entryCoreCount = node.HistoricalUtilization[i].Cores.Count();             // number of cores in the node
                nodeEntryCpuUsage = nodeEntryCpuUsage / entryCoreCount;                   // average CPU usage across cores within the node
                totalEntryCpuUsage += nodeEntryCpuUsage;
            }
            totalEntryCpuUsage = totalEntryCpuUsage / (float)Model.Cluster.Nodes.Count();  // divide by number of nodes in the cluster (average CPU usage across cluster)
            cpuUtilizationPoints.Add(totalEntryCpuUsage);
            cpuPointTimestamps.Add(Model.NodesSummariesHistorical.First().HistoricalUtilization[i].TimeStamp);
        }
    }

    var historicalCpuUtilizationData = [@string.Join(',', cpuUtilizationPoints.Select(i => i.ToString()))];
    var historicalCpuUtilizationTimestamps = [@Html.Raw(string.Join(',', cpuPointTimestamps.Select(i => $"\"{i.ToString()}\"")))];


    var historicalCpuChartData = {
        labels: historicalCpuUtilizationTimestamps,
        datasets: [
            {
                label: 'Average CPU Usage {%)',
                backgroundColor: window.chartColors.blue,
                borderColor: window.chartColors.blue,
                fill: true,
                data: historicalCpuUtilizationData,
            }
        ]
    };

    var historicalCpuChartOptions = {
        responsive: true,
        title: {
            display: true,
            text: 'Average CPU Usage (%)'
        },
        tooltips: {
            mode: 'index',
            intersect: false,
        },
        hover: {
            mode: 'nearest',
            intersect: true
        },
        scales: {
            xAxes: [{
                stacked: false,
            }],
            yAxes: [{
                stacked: false,
            }]
        },
        legend: {
            display: false,
        },
    }

    window.onload = function () {
        var clusterPowerUsageHistoricalCtx = this.document.getElementById('cluster-power-usage-historical').getContext('2d');
        window.clusterPowerUsageHistoricalChart = new Chart(clusterPowerUsageHistoricalCtx, this.clusterPowerUsageHistoricalConfig);

        var clusterMemoryUsageHistoricalCtx = document.getElementById("cluster-memory-usage-historical");
        var historicalMemoryChart = new Chart(clusterMemoryUsageHistoricalCtx, {
            type: 'line',
            data: historicalMemoryChartData,
            options: historicalMemoryChartOptions,
        });

        var clusterCpuUsageHistoricalCtx = document.getElementById("cluster-cpu-usage-historical");
        var historicalCpuChart = new Chart(clusterCpuUsageHistoricalCtx, {
            type: 'line',
            data: historicalCpuChartData,
            options: historicalCpuChartOptions,
        });
    }

    setInterval(function () {
        location.reload();
        }, 60*1000);     // update every 60 seconds (1 minute) since this does not need to be real-time
</script>

<style>
    .chart-container-rt {
        width: 45%;
        margin: auto;
    }

    .chart-container-rt2 {
        width: 72%;
        display: inline-block;
        margin: auto;
    }

    #ClusterPowerUtilizationRT2 {
        margin: auto;
    }

    #ClusterID {
        display: inline-block;
    }

    #AdvancedOptions {
        float: right;
        display: block;
    }

    #OverviewBtn {
        float: right;
        display: inline-block;
    }

    .prevBtn {
        background-color: #f1f1f1;
        color: black;
        padding: 8px 16px;
        display: inline-block;
        text-decoration: none;
    }

    .prevBtn:hover {
        background-color: #dddddd;
        color: black;
    }

    .dropbtn {
        background-color: #f1f1f1;
        color: black;
        padding: 9px 14px;
        min-width: 100px;
        font-size: 16px;
        border: none;
    }

    .dropdown {
        position: relative;
        display: inline-block;
        margin-right: 5px;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f1f1f1;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
    }

    .dropdown-content a {
        color: black;
        padding: 9px 12px;
        text-decoration: none;
        display: block;
    }

    .dropdown-content a:hover {
        background-color: #ddd;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }

    .dropdown:hover .dropbtn {
        background-color: #949494;
    }

    h3, h5 {
        margin-bottom: 0.05em;
    }
</style>