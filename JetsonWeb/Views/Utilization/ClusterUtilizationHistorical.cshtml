@model JetsonWeb.Models.ClusterSummaryHistorical
@{
    ViewBag.Title = "Cluster Utilization (Historical)";
}

<script type="text/javascript" src="https://www.chartjs.org/dist/2.9.3/Chart.min.js"></script>
<script type="text/javascript" src="https://www.chartjs.org/samples/latest/utils.js"></script>

<h3>Cluster Utilization Historical</h3>

<div id="HeaderWrapper">
    <div id="ClusterID">
        <h5>Cluster @Html.DisplayNameFor(model => model.Cluster.Id): @Html.DisplayFor(model => model.Cluster.Id)</h5>
        <p>Last Updated: @ViewData["LastUpdated"]</p>
    </div>
    <div id="AdvancedOptions">
        <div class="dropdown">
            <button class="dropbtn">@ViewBag.RangeString &#8595;</button>
            <div class="dropdown-content">
                <a href="ClusterUtilizationHistorical?id=@Html.DisplayFor(model => model.Cluster.Id)&timeRange=hour">Past Hour</a>
                <a href="ClusterUtilizationHistorical?id=@Html.DisplayFor(model => model.Cluster.Id)&timeRange=day">Past Day</a>
                <a href="ClusterUtilizationHistorical?id=@Html.DisplayFor(model => model.Cluster.Id)&timeRange=week">Past Week</a>
            </div>
        </div>
        <div id="OverviewBtn">
            <a href="ClusterUtilization?id=@Html.DisplayFor(model => model.Cluster.Id)" class="prevBtn">&laquo; Overview</a>
        </div>
    </div>
    <hr />
</div>

<div id="ClusterPowerUtilizationRT2">
    <div class="chart-container-rt2">
        <canvas id="cluster-power-usage-historical"></canvas>
    </div>
    <div class="chart-container-rt2">
        <canvas id="cluster-memory-usage-historical"></canvas>
    </div>
    <div class="chart-container-rt2">
        <canvas id="cluster-cpu-usage-historical"></canvas>
    </div>
</div>

<script>
    var clusterPowerUsageHistoricalData = {
        datasets: [{
            data: [
                @{
                    List<DateTime> powerLabels = new List<DateTime>();
                    for (int i = 0; i < ViewBag.PowerDataCount; i++)
                    {
                        float totalPower = 0;
                        foreach (var node in Model.NodesSummariesHistorical)
                        {
                            totalPower += node.HistoricalPower[i].Power;
                        }
                        powerLabels.Add(Model.NodesSummariesHistorical.First().HistoricalPower[i].Timestamp);
                        @Html.Raw(totalPower);
                        @Html.Raw(",");
                    }
                }
            ],
            label: 'Power Usage (W)',
            backgroundColor: window.chartColors.orange,
            borderColor: window.chartColors.orange,
            fill: false,
        }],
        labels: [
            @{
                foreach (var powerLabel in powerLabels)
                {
                    @Html.Raw("\"" + powerLabel.ToString() + "\"");
                    @Html.Raw(",");
                }
            }
        ]
    }

    var clusterPowerUsageHistoricalOptions = {
        responsive: true,
        title: {
            display: true,
            text: 'Power Usage (W)'
        },
        scales: {
            yAxes: [{
                display: true,
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }

    @{
        var memoryUsedPoints = new List<float>();
        var memoryAvailablePoints = new List<float>();
        var memoryPointTimestamps = new List<DateTime>();
        var maxMemory = 0u;

        for (int i = 0; i < ViewBag.UtilizationDataCount; i++)
        {
            uint totalEntryMemoryUsed = 0;
            uint totalEntryMemoryAvailable = 0;

            foreach (var node in Model.NodesSummariesHistorical)
            {
                totalEntryMemoryUsed += node.HistoricalUtilization[i].MemoryUsed;
                totalEntryMemoryAvailable += node.HistoricalUtilization[i].MemoryAvailable;
            }

            maxMemory = Math.Max(maxMemory, totalEntryMemoryUsed + totalEntryMemoryAvailable);

            memoryUsedPoints.Add((float)totalEntryMemoryUsed / (float)1024);                    // represent memory in GB rather than MB
            memoryAvailablePoints.Add((float)totalEntryMemoryAvailable / (float)1024);          // represent memory in GB rather than MB
            memoryPointTimestamps.Add(Model.NodesSummariesHistorical.First().HistoricalUtilization[i].TimeStamp);
        }

        var maxMemoryGB = maxMemory / (float)1024;
    }


    var historicalMemoryUsedData = [@string.Join(',', memoryUsedPoints.Select(i => i.ToString()))];
    var historicalMemoryAvailData = [@string.Join(',', memoryAvailablePoints.Select(i => i.ToString()))];
    var historicalMemoryTimestamps = [@Html.Raw(string.Join(',', memoryPointTimestamps.Select(i => $"\"{i.ToString()}\"")))];

    var historicalMemoryChartData = {
        labels: historicalMemoryTimestamps,
        datasets: [
            {
                label: 'Memory Used (GB)',
                backgroundColor: window.chartColors.red,
                borderColor: window.chartColors.red,
                fill: true,
                data: historicalMemoryUsedData,
            },
            {
                label: 'Memory Available (GB)',
                backgroundColor: window.chartColors.green,
                borderColor: window.chartColors.green,
                fill: true,
                data: historicalMemoryAvailData,
            }
        ]
    };

    var historicalMemoryChartOptions = {
        responsive: true,
        title: {
            display: true,
            text: 'Memory Usage (GB)'
        },
        tooltips: {
            mode: 'index',
            intersect: false,
        },
        hover: {
            mode: 'nearest',
            intersect: true
        },
        scales: {
            xAxes: [{
                stacked: true,
            }],
            yAxes: [{
                stacked: true,
                ticks: {
                    min: 0,
                    max: @maxMemoryGB,
                }
            }]
        },
        legend: {
            display: true,
            position: 'top'
        },
    }

    @{
        List<DateTime> cpuPointTimestamps = new List<DateTime>();
        List<List<float>> cpuUtilizationPoints = new List<List<float>>();
        float nodeEntryCpuUsage;
        float entryCoreCount;
        for (int i = 0; i < ViewBag.UtilizationDataCount; i++)
        {
            List<float> cpuNodeUtilizationPoints = new List<float>();
            foreach (var node in Model.NodesSummariesHistorical)
            {
                nodeEntryCpuUsage = 0;
                foreach(var core in node.HistoricalUtilization[i].Cores)
                {
                    nodeEntryCpuUsage += core.UtilizationPercentage;                      // add up utilization percentage for all cores
                }
                entryCoreCount = node.HistoricalUtilization[i].Cores.Count();             // number of cores in the node
                nodeEntryCpuUsage = nodeEntryCpuUsage / entryCoreCount;                   // average CPU usage across cores within the node
                nodeEntryCpuUsage /= Model.Cluster.Nodes.Count();
                cpuNodeUtilizationPoints.Add(nodeEntryCpuUsage);
            }
            cpuUtilizationPoints.Add(cpuNodeUtilizationPoints);
            cpuPointTimestamps.Add(Model.NodesSummariesHistorical.First().HistoricalUtilization[i].TimeStamp);
        }

        List<string> colorList = new List<string>()
        {
            "rgb(255, 99, 132)",    // red
            "rgb(255, 159, 64)",    // orange
            "rgb(255, 205, 86)",    // yellow
            "rgb(75, 192, 192)",    // green
            "rgb(54, 162, 235)",    // blue
            "rgb(153, 102, 255)",   // purple
            "rgb(201, 203, 207)"    // grey
        };
    }

    var historicalCpuUtilizationTimestamps = [@Html.Raw(string.Join(',', cpuPointTimestamps.Select(i => $"\"{i.ToString()}\"")))];


    var historicalCpuChartData = {
        labels: historicalCpuUtilizationTimestamps,
        datasets: [
            @{
                if (cpuUtilizationPoints.Count() > 0)
                {

                    for (int i = 0; i < Model.Cluster.Nodes.Count(); i++)
                    {
                        @Html.Raw('{');
                        @Html.Raw("label: \'Average CPU Usage for Node " + i.ToString() + " (%)\',\n");
                        @Html.Raw("backgroundColor: \'" + colorList[i % colorList.Count()] + "\',\n");
                        @Html.Raw("borderColor: \'" + colorList[i % colorList.Count()] + "\',\n");
                        @Html.Raw("fill: true,\n");
                        @Html.Raw("data: [");
                        foreach(var utilPoint in cpuUtilizationPoints)
                        {
                            @Html.Raw(utilPoint[i].ToString());
                            @Html.Raw(',');
                        }
                        @Html.Raw("\n]")
                        @Html.Raw("}\n");

                        if ((i < Model.Cluster.Nodes.Count() - 1) || (cpuUtilizationPoints.Count() == 1))
                        {
                            @Html.Raw(',');
                        }
                        @Html.Raw('\n');
                    }
                }
            }
        ]
    };

    var historicalCpuChartOptions = {
        responsive: true,
        title: {
            display: true,
            text: 'Average CPU Usage (%)'
        },
        tooltips: {
            mode: 'index',
            intersect: false,
            yAlign: 'right'
        },
        hover: {
            mode: 'nearest',
            intersect: true
        },
        scales: {
            xAxes: [{
                stacked: true,
            }],
            yAxes: [{
                stacked: true,
                ticks: {
                    min: 0,
                    max: 100
                }
            }]
        },
        legend: {
            display: false,
        },
    }

    window.onload = function () {
        var clusterPowerUsageHistoricalCtx = this.document.getElementById('cluster-power-usage-historical');
        var historicalPowerChart = new Chart(clusterPowerUsageHistoricalCtx, {
            type: 'line',
            data: clusterPowerUsageHistoricalData,
            options: clusterPowerUsageHistoricalOptions,
        });

        var clusterMemoryUsageHistoricalCtx = document.getElementById("cluster-memory-usage-historical");
        var historicalMemoryChart = new Chart(clusterMemoryUsageHistoricalCtx, {
            type: 'line',
            data: historicalMemoryChartData,
            options: historicalMemoryChartOptions,
        });

        var clusterCpuUsageHistoricalCtx = document.getElementById("cluster-cpu-usage-historical");
        var historicalCpuChart = new Chart(clusterCpuUsageHistoricalCtx, {
            type: 'line',
            data: historicalCpuChartData,
            options: historicalCpuChartOptions,
        });
    }

    setInterval(function () {
        location.reload();
        }, 60*1000);     // update every 60 seconds (1 minute) since this does not need to be real-time
</script>

<style>
    .chart-container-rt {
        width: 45%;
        margin: auto;
    }

    .chart-container-rt2 {
        width: 100%;
        display: inline-block;
        margin: auto;
        overflow: hidden;
    }

    #ClusterPowerUtilizationRT2 {
        margin: auto;
    }

    #ClusterID {
        display: inline-block;
    }

    #AdvancedOptions {
        float: right;
        display: block;
    }

    #OverviewBtn {
        float: right;
        display: inline-block;
    }

    .prevBtn {
        background-color: #f1f1f1;
        color: black;
        padding: 8px 16px;
        display: inline-block;
        text-decoration: none;
    }

    .prevBtn:hover {
        background-color: #dddddd;
        color: black;
    }

    .dropbtn {
        background-color: #f1f1f1;
        color: black;
        padding: 9px 14px;
        min-width: 100px;
        font-size: 16px;
        border: none;
    }

    .dropdown {
        position: relative;
        display: inline-block;
        margin-right: 5px;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f1f1f1;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
    }

    .dropdown-content a {
        color: black;
        padding: 9px 12px;
        text-decoration: none;
        display: block;
    }

    .dropdown-content a:hover {
        background-color: #ddd;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }

    .dropdown:hover .dropbtn {
        background-color: #949494;
    }

    h3, h5 {
        margin-bottom: 0.05em;
    }
</style>